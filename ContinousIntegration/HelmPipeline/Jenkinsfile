pipeline {
    agent any
    environment {
        SERVICE_ACCOUNT_KEY = credentials('serviceaccount')
    }
    stages {
        stage('Clone Repository') {
            steps {
                echo 'Cloning the repository'
                git branch: 'main', url: 'https://github.com/Chamssiddine/remote-development-environment.git'
            }
        }

        stage('Authenticate with Google Cloud') {
            steps {
                withCredentials([file(credentialsId: 'serviceaccount', variable: 'SERVICE_ACCOUNT_KEY')]) {
                    sh '''
                    gcloud auth activate-service-account --key-file=${SERVICE_ACCOUNT_KEY}
                    gcloud config set account $(gcloud auth list --filter=status:ACTIVE --format='value(account)')
                    gcloud config set project remotedevenv-383413
                    '''
                }
            }
        }
        stage('Helm installation'){
            steps {
                sh '''
                    bash ContinousIntegration/installHelm.bash
                '''
            }


        }
        stage('Adding Helm Charts Repositories') {
            steps {
                sh '''
                    helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                    helm repo add stable https://charts.helm.sh/stable
                    helm repo add grafana https://grafana.github.io/helm-charts
                    helm repo add codecentric https://codecentric.github.io/helm-charts
                    helm repo add kasten https://charts.kasten.io/
                    helm repo add hashicorp https://helm.releases.hashicorp.com
                    helm repo update
                '''
            }
        }
        stage('Deploy Prometheus') {
            steps {
                dir('helm_charts/prometheus_chart') {
                    sh 'helm upgrade --install prometheus prometheus-community/prometheus -n monitoring --create-namespace -f prometheus_values.yaml --version 19.0.0'
                }
            }
        }

        stage('Deploy Grafana') {
            steps {
                dir('helm_charts/grafana_chart') {      
                    sh 'helm upgrade --install grafana grafana/grafana -n monitoring --create-namespace -f grafana_values.yaml --version 6.50.5'
                }
            }
        }

        stage('Deploy AWX Operator') {
            steps {
                dir('helm_charts/awx_chart/awx-operator') {
                    sh 'kubectl apply -k .'
                }
            }
        }

        stage('Deploy Keycloak') {
            steps {
                dir('helm_charts/keycloak_chart') {
                    sh 'helm upgrade --install keycloak codecentric/keycloak -f keycloak_values.yaml'
                }
            }
        }

        stage('Install Kasten K10') {
            steps {
                sh '''
                    myproject=$(gcloud config get-value core/project)
                    gcloud iam service-accounts create k10-sa --display-name "K10 Service Account"
                    k10saemail=$(gcloud iam service-accounts list --filter "k10-sa" --format="value(email)")
                    gcloud iam service-accounts keys create --iam-account=${k10saemail} k10-sa-key.json
                    gcloud projects add-iam-policy-binding ${myproject} --member serviceAccount:${k10saemail} --role roles/compute.storageAdmin
                    kubectl create namespace kasten-io
                    export sa_key=$(base64 k10-sa-key.json)
                    helm install k10 kasten/k10 --namespace=kasten-io --set secrets.googleApiKey=$sa_key
                '''
            }
        }


        stage('Install Vault') {
                steps {
                    sh 'cd helm_charts/vault_chart'
                    sh 'helm install vault hashicorp/vault \
                        --set="server.ha.enabled=true" \
                        --set="server.ha.raft.enabled=true" \
                        -f vault_values.yaml \
                        --version 0.24.0 \
                        -n secrets --create-namespace'
                }
            }
            
            stage('Initialize and Unseal Vault') {
                steps {
                    sh '''
                        kubectl exec -n secrets vault-0 -- vault operator init -key-shares=1 -key-threshold=1 -format=json > cluster-keys.json
                        cat cluster-keys.json | jq -r ".unseal_keys_b64[]"
                        VAULT_UNSEAL_KEY=$(cat cluster-keys.json | jq -r ".unseal_keys_b64[]")
                        kubectl exec -n secrets vault-0 -- vault operator unseal $VAULT_UNSEAL_KEY
                    '''
                }
            }
            
            stage('Join Vault Nodes to Cluster') {
                steps {
                    sh '''
                        cat cluster-keys.json | jq -r ".root_token"
                        CLUSTER_ROOT_TOKEN=$(cat cluster-keys.json | jq -r ".root_token")
                        kubectl exec -n secrets vault-0 -- vault login $CLUSTER_ROOT_TOKEN
                        kubectl exec -n secrets vault-0 -- vault operator raft list-peers
                        kubectl exec -n secrets vault-1 -- vault operator raft join http://vault-0.vault-internal:8200
                        kubectl exec -n secrets vault-1 -- vault operator unseal $VAULT_UNSEAL_KEY
                        kubectl exec -n secrets vault-2 -- vault operator raft join http://vault-0.vault-internal:8200
                        kubectl exec -n secrets vault-2 -- vault operator unseal $VAULT_UNSEAL_KEY
                        kubectl exec -n secrets vault-0 -- vault operator raft list-peers
                    '''
                }
            }
        
    }
}
